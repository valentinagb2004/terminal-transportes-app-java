/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vistas;

import Controladores.ControladorPrincipal;
import Controladores.ControladorVentaTiquetes;
import Excepciones.LimiteBusException;
import Excepciones.SinCuposDisponiblesException;
import Excepciones.ReservaExisteException;
import Excepciones.SinPuntosAcumuladosException;
import Excepciones.TiqueteExisteException;
import Excepciones.ValorTiqueteMaximoPuntosException;
import Modelo.Caseta;
import Modelo.Cliente;
import Modelo.Notificacion;
import Modelo.Tiquete;
import Modelo.Usuario;
import Modelo.RegistroVentas;
import Modelo.Reserva;
import Modelo.Viaje;
import Util.Lista;
import Util.Utils;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Valentina
 */
public class VentanaVentaTiquetes extends javax.swing.JFrame {

    /**
     * Creates new form VentanaVentaTiquetes
     */
    
    private ControladorPrincipal controladorPrincipal;
    private ControladorVentaTiquetes controladorVentaTiquetes;
    private Lista<Viaje> listaViajes = new Lista<>();
    private Utils util = new Utils();
    
    public VentanaVentaTiquetes(ControladorPrincipal controladorPrincipal) {
        initComponents();
        this.controladorPrincipal = controladorPrincipal;
        
        Usuario usuarioLogueado = this.controladorPrincipal.getUsuariologin();
        Caseta caseta = controladorPrincipal.buscarCaseta(usuarioLogueado.getCedula());
        this.controladorVentaTiquetes = new ControladorVentaTiquetes(caseta);
        
        llenarTablaViajes();
    }
    
    private boolean validarCamposCompra() {
        String cedula = txtCedulaCliente.getText();
        String cantidad = txtCantidad.getText();
        String numero = txtNumeroViaje.getText();

        if (cedula.trim().equals("") || cantidad.trim().equals("") || numero.trim().equals("")) {
            return false;
        }
        return true;
    }
    
    private boolean validarCamposCedulaNumeroViaje() {
        String cedula = txtCedulaCliente.getText();
        String numero = txtNumeroViaje.getText();

        if (cedula.trim().equals("") || numero.trim().equals("")) {
            return false;
        }
        return true;
    }
    
    private void llenarTablaViajes() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Numero","Origen", "Destino", "Fecha Salida", "Fecha Llegada", "Valor unitario", "Placa Bus", "Cupos disponibles", "Reservas"});
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        listaViajes = controladorVentaTiquetes.getListaViajes();
        for (int i = 0; i < listaViajes.size(); i++) {
            Viaje viaje = listaViajes.get(i);
            model.addRow(new Object[]{
                i,
                viaje.getOrigen(),
                viaje.getDestino(),
                viaje.getFechaSalidaCompleta().format(formatter),
                viaje.getFechaLlegadaCompleta().format(formatter),
                viaje.getValorUnitario(),
                viaje.getBus().getPlaca(),
                viaje.calcularCuposDisponibles(),
                viaje.calcularReservasActivas()
            });
        }
        tablaViajes.setModel(model);
    }
    
    private void mostrarResumenCompra(Cliente cliente){
        areaResumen.setText("");
        RegistroVentas venta = cliente.obtenerUltimoRegistroCompra();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        
        areaResumen.append("Tipo venta:       "+venta.getTipoVenta() + "\n");
        areaResumen.append("Fecha venta:       "+venta.getFechaVenta().format(formatter) + "\n");
        areaResumen.append("Cantidad tiquetes: "+venta.getCantidadTiquetes() + "\n");
        areaResumen.append("Total:             "+venta.getCantidadTiquetes()* venta.getViaje().getValorUnitario() + "\n");
        areaResumen.append("Origen:            "+venta.getViaje().getOrigen() + "\n");
        areaResumen.append("Destino:           "+venta.getViaje().getDestino() + "\n");
        areaResumen.append("Hora Salida:       "+venta.getViaje().getFechaSalidaCompleta().format(formatter) + "\n");
        areaResumen.append("Hora Llegada:      "+venta.getViaje().getFechaLlegadaCompleta().format(formatter) + "\n");
        areaResumen.append("Puntos obtenidos:      "+venta.getAccion() +" "+ venta.getPuntos() +"\n");
        
        areaResumen.append("Puntos totales:     "+cliente.getPuntos());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtCedulaCliente = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        txtNumeroViaje = new javax.swing.JTextField();
        btnComprar = new javax.swing.JButton();
        btnCambiarPuntos = new javax.swing.JButton();
        btnReserva = new javax.swing.JButton();
        btnDevolucion = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaViajes = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaResumen = new javax.swing.JTextArea();
        btnVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos tiquete"));

        txtCedulaCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Cedula cliente"));

        txtCantidad.setBorder(javax.swing.BorderFactory.createTitledBorder("Cantidad tiquetes"));

        txtNumeroViaje.setBorder(javax.swing.BorderFactory.createTitledBorder("Nro: viaje"));

        btnComprar.setText("Comprar");
        btnComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprarActionPerformed(evt);
            }
        });

        btnCambiarPuntos.setText("Cambiar puntos");
        btnCambiarPuntos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarPuntosActionPerformed(evt);
            }
        });

        btnReserva.setText("Confirmar reserva");
        btnReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservaActionPerformed(evt);
            }
        });

        btnDevolucion.setText("Devolucion");
        btnDevolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolucionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtNumeroViaje, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtCedulaCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                .addComponent(txtCantidad)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnDevolucion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReserva, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                            .addComponent(btnCambiarPuntos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnComprar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(19, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(txtCedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtNumeroViaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnComprar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCambiarPuntos, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDevolucion, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista viajes"));

        tablaViajes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaViajes);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Resumen compra"));

        areaResumen.setColumns(20);
        areaResumen.setRows(5);
        jScrollPane2.setViewportView(areaResumen);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addGap(37, 37, 37))
        );

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        VentanaMenuAdminFlota adminFlota = new VentanaMenuAdminFlota(controladorPrincipal);
        adminFlota.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprarActionPerformed
        // TODO add your handling code here:
        
        if(validarCamposCompra()){
            
            String cedula = txtCedulaCliente.getText();
            String cantidad = txtCantidad.getText();
            String numeroRegistro = txtNumeroViaje.getText();
            try {
                int numero = Integer.parseInt(numeroRegistro);
                int cantidadTiquetes = Integer.parseInt(cantidad);
                
                if(cantidadTiquetes <= 0){
                    JOptionPane.showMessageDialog(null, "Ingrese un numero mayor a cero");
                    return;
                }
                
                Cliente cliente = controladorPrincipal.buscarCliente(cedula);
                if(cliente == null){
                    JOptionPane.showMessageDialog(null, "Este cliente no se encuentra registrado");
                    return;
                }
                
                Viaje viaje = listaViajes.get(numero);
                Tiquete tiquete = new Tiquete( LocalDate.now());
                        
                controladorVentaTiquetes.agregarVentaTiquetes(cliente, tiquete, viaje, cantidadTiquetes);
                mostrarResumenCompra(cliente);
                llenarTablaViajes();
                JOptionPane.showMessageDialog(null, "se compro el tiquete");
                controladorPrincipal.guardarCambios();
            } 
            catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ingrese un numero valido");
            } catch (ArrayIndexOutOfBoundsException ex) {
                JOptionPane.showMessageDialog(null, "Ingrese un numero valido de viaje");
            }
            catch (SinCuposDisponiblesException | LimiteBusException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }else{
            JOptionPane.showMessageDialog(null, "todos los campos son obligatorios");
        }
    }//GEN-LAST:event_btnComprarActionPerformed

    private void btnCambiarPuntosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarPuntosActionPerformed
        // TODO add your handling code here:
        if(validarCamposCedulaNumeroViaje()){
            String cedula = txtCedulaCliente.getText();
            String numeroRegistro = txtNumeroViaje.getText();
            try {
                int numero = Integer.parseInt(numeroRegistro);
                int cantidadTiquetes = 1;
                
                Cliente cliente = controladorPrincipal.buscarCliente(cedula);
                if(cliente == null){
                    JOptionPane.showMessageDialog(null, "Este cliente no se encuentra registrado");
                    return;
                }
                
                Viaje viaje = listaViajes.get(numero);
                Tiquete tiquete = new Tiquete(LocalDate.now());
                        
                controladorVentaTiquetes.agregarVentaTiquetesConPuntos(cliente, tiquete, viaje, cantidadTiquetes);
                mostrarResumenCompra(cliente);
                llenarTablaViajes();
                JOptionPane.showMessageDialog(null, "se compro el tiquete");
                controladorPrincipal.guardarCambios();
            } 
            catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ingrese un numero valido");
            } catch (ArrayIndexOutOfBoundsException ex) {
                JOptionPane.showMessageDialog(null, "Ingrese un numero valido de viaje");
            }
            catch (SinCuposDisponiblesException | LimiteBusException | SinPuntosAcumuladosException | ValorTiqueteMaximoPuntosException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }else{
            JOptionPane.showMessageDialog(null, "La cedula y el numero de viaje son obligatorios");
        }
    }//GEN-LAST:event_btnCambiarPuntosActionPerformed

    private void btnReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservaActionPerformed
        // TODO add your handling code here:
        
        if(validarCamposCedulaNumeroViaje()){
            
            String cedula = txtCedulaCliente.getText();
            String numeroRegistro = txtNumeroViaje.getText();
            try {
                int numero = Integer.parseInt(numeroRegistro);
                
                Cliente cliente = controladorPrincipal.buscarCliente(cedula);
                if(cliente == null){
                    JOptionPane.showMessageDialog(null, "Este cliente no se encuentra registrado");
                    return;
                }
                
                Viaje viaje = listaViajes.get(numero);
                        
                controladorVentaTiquetes.confirmarReserva(cliente, viaje);
                mostrarResumenCompra(cliente);
                llenarTablaViajes();
                JOptionPane.showMessageDialog(null, "La reserva se hizo efectiva");
                controladorPrincipal.guardarCambios();
            } 
            catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ingrese un numero valido");
            } catch (ArrayIndexOutOfBoundsException ex) {
                JOptionPane.showMessageDialog(null, "Ingrese un numero valido de viaje");
            }
            catch (ReservaExisteException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        
        }else{
            JOptionPane.showMessageDialog(null, "La cedula y el numero de viaje son obligatorios, para verificar si"
                    + "el cliente tiene reservas activas en el viaje seleccionado");
        }
        
    }//GEN-LAST:event_btnReservaActionPerformed

    private void btnDevolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolucionActionPerformed
        // TODO add your handling code here:
        if(validarCamposCedulaNumeroViaje()){
            
            String cedula = txtCedulaCliente.getText();
            String numeroRegistro = txtNumeroViaje.getText();
            try {
                int numero = Integer.parseInt(numeroRegistro);
                
                Cliente cliente = controladorPrincipal.buscarCliente(cedula);
                if(cliente == null){
                    JOptionPane.showMessageDialog(null, "Este cliente no se encuentra registrado");
                    return;
                }
                
                Viaje viaje = listaViajes.get(numero);
                        
                String mensaje = "La devolucion se realizo.";
                Notificacion notificacion = controladorVentaTiquetes.devolucion(cliente, viaje);
                if(notificacion != null){
                    mensaje += notificacion.getMensaje();
                    
                    Cliente clienteNotificado = controladorPrincipal.buscarCliente(notificacion.getCedula());
                    clienteNotificado.agregarNotificacion(notificacion);
                }
                mostrarResumenCompra(cliente);
                llenarTablaViajes();
                JOptionPane.showMessageDialog(null, mensaje);
                controladorPrincipal.guardarCambios();
            } 
            catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ingrese un numero valido");
            } catch (ArrayIndexOutOfBoundsException ex) {
                JOptionPane.showMessageDialog(null, "Ingrese un numero valido de viaje");
            }
            catch (TiqueteExisteException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        
        }else{
            JOptionPane.showMessageDialog(null, "La cedula y el numero de viaje son obligatorios, para hacer la devolucion de la compra de 1 tiquete");
        }
    }//GEN-LAST:event_btnDevolucionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaResumen;
    private javax.swing.JButton btnCambiarPuntos;
    private javax.swing.JButton btnComprar;
    private javax.swing.JButton btnDevolucion;
    private javax.swing.JButton btnReserva;
    private javax.swing.JButton btnVolver;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaViajes;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCedulaCliente;
    private javax.swing.JTextField txtNumeroViaje;
    // End of variables declaration//GEN-END:variables
}
